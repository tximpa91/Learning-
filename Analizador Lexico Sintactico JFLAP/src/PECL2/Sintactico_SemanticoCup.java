
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 05 11:57:25 CET 2015
//----------------------------------------------------

package PECL2;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 05 11:57:25 CET 2015
  */
public class Sintactico_SemanticoCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico_SemanticoCup() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico_SemanticoCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_SemanticoCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\006\000\002\002\004\000\002\002" +
    "\006\000\002\003\005\000\002\003\002\000\002\003\003" +
    "\000\002\004\002\000\002\004\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\003\000\002\023\004\000\002" +
    "\005\005\000\002\005\003\000\002\024\003\000\002\024" +
    "\006\000\002\024\006\000\002\025\004\000\002\025\002" +
    "\000\002\011\003\000\002\011\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\004\000\002\007\003\000\002" +
    "\007\003\000\002\006\005\000\002\006\006\000\002\006" +
    "\004\000\002\006\005\000\002\006\002\000\002\006\006" +
    "\000\002\021\002\000\002\021\006\000\002\021\006\000" +
    "\002\012\002\000\002\012\004\000\002\013\004\000\002" +
    "\013\003\000\002\022\005\000\002\022\005\000\002\020" +
    "\003\000\002\020\003\000\002\014\002\000\002\014\005" +
    "\000\002\014\004\000\002\015\007\000\002\015\010\000" +
    "\002\015\003\000\002\016\007\000\002\016\006\000\002" +
    "\016\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\006\003\005\014\004\001\002\000\014\002" +
    "\uffe1\003\010\004\uffe1\005\uffe1\007\012\001\002\000\014" +
    "\002\uffe1\003\010\004\uffe1\005\uffe1\007\012\001\002\000" +
    "\004\002\007\001\002\000\004\002\000\001\002\000\010" +
    "\003\015\006\uffde\025\016\001\002\000\012\002\uffd6\003" +
    "\033\004\uffd6\005\034\001\002\000\010\003\015\006\uffde" +
    "\025\016\001\002\000\004\006\030\001\002\000\010\003" +
    "\015\006\uffde\025\016\001\002\000\010\003\uffdb\006\uffdb" +
    "\025\uffdb\001\002\000\006\017\021\022\022\001\002\000" +
    "\004\023\020\001\002\000\010\003\uffdc\006\uffdc\025\uffdc" +
    "\001\002\000\006\010\025\027\024\001\002\000\004\025" +
    "\016\001\002\000\004\023\uffd9\001\002\000\006\021\uffd7" +
    "\023\uffd7\001\002\000\006\021\uffd8\023\uffd8\001\002\000" +
    "\004\023\uffda\001\002\000\004\006\uffdd\001\002\000\004" +
    "\023\031\001\002\000\012\002\uffe0\003\uffe0\004\uffe0\005" +
    "\uffe0\001\002\000\010\002\ufffd\003\136\004\137\001\002" +
    "\000\012\002\uffd6\003\033\004\uffd6\005\034\001\002\000" +
    "\004\026\035\001\002\000\010\003\037\012\042\025\041" +
    "\001\002\000\010\002\uffd1\003\uffd1\004\uffd1\001\002\000" +
    "\014\002\uffd6\003\033\004\uffd6\005\034\012\ufff4\001\002" +
    "\000\010\002\uffd5\003\uffd5\004\uffd5\001\002\000\006\016" +
    "\060\020\057\001\002\000\012\011\045\013\046\025\051" +
    "\030\050\001\002\000\004\012\044\001\002\000\012\011" +
    "\045\013\046\025\051\030\050\001\002\000\004\023\uffca" +
    "\001\002\000\004\023\uffc9\001\002\000\004\023\052\001" +
    "\002\000\004\023\uffc8\001\002\000\004\023\uffc7\001\002" +
    "\000\012\002\uffd6\003\033\004\uffd6\005\034\001\002\000" +
    "\010\002\uffd0\003\uffd0\004\uffd0\001\002\000\004\023\055" +
    "\001\002\000\012\002\uffd6\003\033\004\uffd6\005\034\001" +
    "\002\000\010\002\uffcf\003\uffcf\004\uffcf\001\002\000\006" +
    "\010\025\027\024\001\002\000\016\011\066\013\063\020" +
    "\065\025\064\026\062\030\067\001\002\000\012\003\ufff5" +
    "\006\ufff5\012\ufff5\025\ufff5\001\002\000\022\011\106\013" +
    "\111\015\uffe3\020\107\021\uffe3\023\uffe3\024\uffe3\030\112" +
    "\001\002\000\012\015\uffe9\021\uffe9\023\uffe9\024\uffe9\001" +
    "\002\000\012\015\uffec\021\uffec\023\uffec\024\uffec\001\002" +
    "\000\016\011\066\013\063\020\065\025\064\026\062\030" +
    "\067\001\002\000\012\015\uffe8\021\uffe8\023\uffe8\024\uffe8" +
    "\001\002\000\012\015\uffeb\021\uffeb\023\uffeb\024\uffeb\001" +
    "\002\000\004\023\101\001\002\000\012\015\074\021\ufff3" +
    "\023\ufff3\024\072\001\002\000\016\011\uffee\013\uffee\020" +
    "\uffee\025\uffee\026\uffee\030\uffee\001\002\000\014\011\066" +
    "\013\063\025\064\026\062\030\067\001\002\000\016\011" +
    "\uffed\013\uffed\020\uffed\025\uffed\026\uffed\030\uffed\001\002" +
    "\000\012\015\074\021\uffef\023\uffef\024\072\001\002\000" +
    "\006\021\ufff1\023\ufff1\001\002\000\016\011\066\013\063" +
    "\020\065\025\064\026\062\030\067\001\002\000\006\021" +
    "\ufff0\023\ufff0\001\002\000\012\003\ufff6\006\ufff6\012\ufff6" +
    "\025\ufff6\001\002\000\004\021\103\001\002\000\012\015" +
    "\074\021\uffef\023\uffef\024\072\001\002\000\006\021\ufff2" +
    "\023\ufff2\001\002\000\012\015\uffea\021\uffea\023\uffea\024" +
    "\uffea\001\002\000\006\021\uffcd\022\uffcd\001\002\000\012" +
    "\011\106\013\111\026\116\030\112\001\002\000\006\021" +
    "\113\022\114\001\002\000\006\021\uffcc\022\uffcc\001\002" +
    "\000\006\021\uffcb\022\uffcb\001\002\000\012\015\uffe5\021" +
    "\uffe5\023\uffe5\024\uffe5\001\002\000\022\011\106\013\111" +
    "\015\uffe3\020\107\021\uffe3\023\uffe3\024\uffe3\030\112\001" +
    "\002\000\012\015\uffe4\021\uffe4\023\uffe4\024\uffe4\001\002" +
    "\000\014\011\106\013\111\020\107\021\uffe3\030\112\001" +
    "\002\000\006\021\120\022\121\001\002\000\012\015\uffe7" +
    "\021\uffe7\023\uffe7\024\uffe7\001\002\000\022\011\106\013" +
    "\111\015\uffe3\020\107\021\uffe3\023\uffe3\024\uffe3\030\112" +
    "\001\002\000\012\015\uffe6\021\uffe6\023\uffe6\024\uffe6\001" +
    "\002\000\004\021\124\001\002\000\012\015\uffe2\021\uffe2" +
    "\023\uffe2\024\uffe2\001\002\000\004\021\126\001\002\000" +
    "\012\003\037\012\042\022\130\025\131\001\002\000\010" +
    "\002\uffd3\003\uffd3\004\uffd3\001\002\000\010\003\037\012" +
    "\042\025\041\001\002\000\004\016\060\001\002\000\010" +
    "\002\uffd2\003\uffd2\004\uffd2\001\002\000\010\002\uffce\003" +
    "\uffce\004\uffce\001\002\000\010\002\uffd4\003\uffd4\004\uffd4" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffc\001" +
    "\002\000\010\003\140\006\ufffb\025\131\001\002\000\010" +
    "\003\ufff4\006\ufff4\025\ufff4\001\002\000\006\003\144\006" +
    "\145\001\002\000\010\003\140\006\ufffb\025\131\001\002" +
    "\000\006\003\ufffa\006\ufffa\001\002\000\006\002\ufff7\023" +
    "\150\001\002\000\004\023\147\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\ufff8\001" +
    "\002\000\004\006\152\001\002\000\004\023\153\001\002" +
    "\000\012\002\uffdf\003\uffdf\004\uffdf\005\uffdf\001\002\000" +
    "\012\002\uffd6\003\033\004\uffd6\005\034\001\002\000\010" +
    "\002\ufffd\003\136\004\137\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\002\005\001\001\000\004\021\153\001" +
    "\001\000\004\021\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\150\013\013\022\016\001\001\000" +
    "\004\014\031\001\001\000\010\012\012\013\013\022\016" +
    "\001\001\000\002\001\001\000\010\012\026\013\013\022" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\025\001\001\000" +
    "\004\022\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\134\001\001" +
    "\000\004\014\133\001\001\000\002\001\001\000\010\005" +
    "\042\015\037\016\035\001\001\000\002\001\001\000\004" +
    "\014\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\053\001\001\000\002\001\001\000\004\017\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\055\001\001\000\002\001\001\000\004\020\124\001\001" +
    "\000\010\007\070\023\060\024\067\001\001\000\002\001" +
    "\001\000\006\006\104\010\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\070\024\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\072\001\001\000\002\001\001\000\004\007\074\001" +
    "\001\000\002\001\001\000\006\011\076\025\075\001\001" +
    "\000\002\001\001\000\006\007\070\024\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\076\025\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\114\010\107\001\001\000\002\001\001" +
    "\000\006\006\122\010\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\121\010\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\042\016\126\001\001\000\002\001\001" +
    "\000\010\005\042\015\131\016\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\140\005" +
    "\141\001\001\000\002\001\001\000\004\026\145\001\001" +
    "\000\006\004\142\005\141\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\154\001\001\000\004" +
    "\003\155\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_SemanticoCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_SemanticoCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_SemanticoCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}







  public void report_error(String message, Object info,int errors, int semantic,int a) {
  	System.out.println("");

  }

	
	 public void syntax_error (Symbol s)
	{	
	
		System.out.println ("Error sintactico en la linea " + s.left + " " + s.right + ", token " + s.value + " incorrecto.");
	}
	
	public void unrecovered_syntax_error(Symbol s) {
		System.out.println("");
	}

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    }
    
    	
	
    
    
  
  
	


public static void main (String argv[]) throws Exception

{
 			
    
		
			File fis=new File(argv[8]); 
        	String nombre= fis.getName();
 			int tamaño = nombre.length();
 			
        	if (nombre.startsWith(".prog", tamaño-5))
        	{
        	FileInputStream realFile =new FileInputStream(fis.getAbsolutePath());   
        		
				System.out.println();
				System.out.println( "Comenzando el análisis de su archivo: "+ nombre);
				System.out.println();
				
				
				 
				
				Sintactico_SemanticoCup probando =  new Sintactico_SemanticoCup (new Yylex(realFile)); 
				probando.parse();
				}
			else
			{
			System.out.println();
			System.out.println( "Comenzando el análisis de su archivo: "+ nombre);
		
			System.out.println( "Su Archivo:  " +nombre+ " no es compatible");
			
				}		
			
		
}

	



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico_SemanticoCup$actions {



	public Hashtable<String,Item> contenedor =new Hashtable<String,Item>();
	public ArrayList<Item> Tokens = new ArrayList<Item>();
	public String type;
	public String returno;
	public int param=0;
	public int aux =0;
	public static int errors;
	public static int warnings;
	public static int semantic;

	

	public void  tokenID ()
	{
		Set set = contenedor.entrySet();
    	Iterator it = set.iterator();
    	while (it.hasNext()) 
    	{
      		Map.Entry entry = (Map.Entry) it.next();
      		if(((Item) entry.getValue()).getNumero()==0 && ((Item) entry.getValue()).getValue().equalsIgnoreCase("funcion") )
      		System.out.println(entry.getKey() + " : " + ((Item) entry.getValue()).getTipo());
    	}
	}
	
	public String check2 ( String token)
	{
		String j = "ERROR";
	
		if(token != null)
		{	if(contenedor.get(token)!=null)	
			{
				Item i = contenedor.get(token);
				j =i.getTipo();
			}
			else
			{
	  			j =  "No declarado";
			}
		}
	
	
		
		
 		return j;
	}
	
	

	public  String check(String token)
	{
		if (token !=null){
		Item  i = contenedor.get(token);
			if(i==null)
			{	
				if(token.equalsIgnoreCase("False") || token.equalsIgnoreCase("True"))
			
				{
					return "BOOLEAN";
				}
				else
				{
					
					return "INTEGER";
				}
				
				}
			
			else
			{
				return i.getTipo();
			}
		 
		}
		
		return "ERROR";
	}
	
	
		
	public  int checkfunc(String token)
	{
		Item i = contenedor.get(token);
		
		if(i==null)
		{	
			return 0;
		}
		else
		{  
			return i.getParametros().size();
		}
	}
	

	public int param (String argumento)
	{
		String[] result = argumento.split(",");
	
	 	return  result.length;
	
	
	
	}
	public String parametros2 (String argumento,String funcid)
	{	
		int cont=0;
		
		String condicion="No Declarado";
		if( contenedor.get(funcid)!=null){
		    contenedor.get(funcid).setNumero(1);
		    ArrayList<Item> lista = contenedor.get(funcid).getParametros();
		    
		    if (lista.size()!=0){
			int i = lista.size()-1;
			String[] result = argumento.split(",");
			for (int x=0; x<result.length; x++)
			{	
				if(result[x].equalsIgnoreCase("true")||result[x].equalsIgnoreCase("false"))
				{	result[x]="boolean"; }
				else
				{
					if(result[x].matches("\\d"))
					{
     				result[x]="integer";
					}
     		
				}
     			
     				if (lista.get(i).getTipo().equalsIgnoreCase(result[x].toString()))
     				{
     				
     				cont=cont+1;
     				}
     			
     				i=i-1;
     			
     		
     	
			}
         
			if (cont == lista.size())
				{condicion="true";}
			else
				{condicion = "false";}
			return condicion;
	  }
		else{
			condicion = "Sin parametros";
			return condicion;
			
		}
		}
		else{
			return condicion;
		}
		
	}
	
	
	
	public void reporte()
	{
		
		System.out.println("--------------------------------------------------------------------------");
	 	System.out.println("Numero de errores sintacticos: " + errors);
	 	System.out.println("Numero de errores semanticos: " + semantic);
	 	System.out.println("Numero de errores lexicos: " + Yylex.lexico);
	 	Set set = contenedor.entrySet();
    	Iterator it = set.iterator();
    	while (it.hasNext()) 
    	{
      		Map.Entry entry = (Map.Entry) it.next();
      		if(((Item) entry.getValue()).getNumero()==0 && ((Item) entry.getValue()).getValue().equalsIgnoreCase("funcion") )
      		System.out.println("Warning: la funcion "+ entry.getKey() + " ha sido declarada y no usada" );
    	}
	 	
	 }





  private final Sintactico_SemanticoCup parser;

  /** Constructor */
  CUP$Sintactico_SemanticoCup$actions(Sintactico_SemanticoCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico_SemanticoCup$do_action(
    int                        CUP$Sintactico_SemanticoCup$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_SemanticoCup$parser,
    java.util.Stack            CUP$Sintactico_SemanticoCup$stack,
    int                        CUP$Sintactico_SemanticoCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_SemanticoCup$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_SemanticoCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // returntype ::= TK_ID 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT= E; 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("returntype",13, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // returntype ::= TK_NUMERO 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		Integer E = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT= E.toString(); 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("returntype",13, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // returntype ::= TK_FALSE 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT= E;   
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("returntype",13, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // returntype ::= TK_TRUE 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT = E; 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("returntype",13, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valuetype ::= TK_NUMERO 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		Integer E = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT= E.toString(); 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("valuetype",6, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valuetype ::= TK_FALSE 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT= E; 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("valuetype",6, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valuetype ::= TK_TRUE 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT= E; 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("valuetype",6, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // body ::= error decfunc 
            {
              String RESULT =null;
		  errors++;
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // body ::= TK_RETURN returntype TK_SEMI decfunc 
            {
              String RESULT =null;
		int E3left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).right;
		String E3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).value;
		   returno=E3;
		 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // body ::= expresion TK_RETURN returntype TK_SEMI decfunc 
            {
              String RESULT =null;
		int E3left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).right;
		String E3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).value;
		   returno=E3;
		 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // func ::= body 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("func",11, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // func ::= TK_ID TK_OPENPARENT tipo TK_CLOSEPARENT TK_COMA func 
            {
              String RESULT =null;
		int E2left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-5)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-5)).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-5)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)).right;
		String E3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)).value;
		 
		   		Item i = new Item(E2,"",E3);
		   		contenedor.put(E2,i);
		   		Tokens.add(i); 
		   		     
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("func",11, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // func ::= TK_ID TK_OPENPARENT tipo TK_CLOSEPARENT body 
            {
              String RESULT =null;
		int E2left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-4)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-4)).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-4)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).right;
		String E3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).value;
		    Item i = new Item (E2,"",E3);
				  contenedor.put(E2,i);
				  
		   		  Tokens.add(i);
				                    
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("func",11, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // decfunc ::= error decfunc 
            {
              String RESULT =null;
		errors++;
			 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("decfunc",10, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // decfunc ::= TK_FUNCTION TK_FUNCID func 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).value;
		               
				Item i = new Item(E1,"funcion",check(returno),((ArrayList<Item>)Tokens.clone())); 
				contenedor.put(E1,i);
			 	Tokens.removeAll(Tokens);    
			 	     
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("decfunc",10, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // decfunc ::= 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("decfunc",10, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo ::= TK_BOOL 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT = E;
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo ::= TK_INTEGER 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT = E;
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // asignacion ::= TK_ID TK_COMA asignacion 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).value;
		  
				Item i = new Item(E1,"",type);
				contenedor.put(E1,i);
		
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("asignacion",16, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacion ::= TK_ID TK_ASIGNACION tipo 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
			Item i= new Item(E1,"",e);
				contenedor.put(E1,i);
				type=e;
				RESULT = e ;		
					
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("asignacion",16, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // decl ::= error 
            {
              String RESULT =null;
		errors++;
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("decl",9, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // decl ::= asignacion TK_SEMI 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("decl",9, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // decls ::= decl decls 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).value;
		   RESULT=E1;     
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("decls",8, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // decls ::= 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("decls",8, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // decvar ::= error decls TK_END TK_SEMI 
            {
              String RESULT =null;
		  errors++;
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("decvar",15, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // decvar ::= TK_VARCDEL decls TK_END TK_SEMI 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("decvar",15, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decvar ::= 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("decvar",15, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // argumento ::= TK_OPENPARENT TK_FUNCID argumento TK_CLOSEPARENT 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("argumento",4, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // argumento ::= 
            {
              String RESULT =null;
		 RESULT= ",";
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("argumento",4, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argumento ::= valuetype TK_COMA argumento 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 
				   RESULT=E1+","+e2; 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("argumento",4, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argumento ::= valuetype TK_CLOSEPARENT 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).value;
		 
				   RESULT=E1+","; 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("argumento",4, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argumento ::= TK_OPENPARENT valuetype TK_COMA argumento 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		    
				 	   RESULT=E1+","+e2;      
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("argumento",4, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argumento ::= TK_OPENPARENT valuetype TK_CLOSEPARENT 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		
					
					RESULT=E1+","; 
					
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("argumento",4, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opcion ::= TK_TRUE 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT= E; 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("opcion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opcion ::= TK_FALSE 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT= E; 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("opcion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // opcion ::= TK_FUNCID argumento 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		
			
			if((parametros2(E2,E).equalsIgnoreCase("No declarado")))
			{
				System.out.println("La funcion: " + E+ " en la columna "  + Eleft + " linea " + Eright + " No esta declarada");
				semantic=semantic + 1; 
				System.out.println("");
			}
			else
			{
				
				if(!(checkfunc(E)==param(E2)))
				{
			 		System.out.println("Error en la llamada de la funcion: " + E+ " en la columna "  + Eleft + " linea " + Eright + " la cantidad de parametros son incorrectos" );
			 		errors=errors + 1;
			 		System.out.println("");
				}	
				else
				{
					if((parametros2(E2,E).equalsIgnoreCase("false")))
				{
					System.out.println("La funcion: " + E+ " en la columna "  + Eleft + " linea " + Eright + " los tipos de parametros son incorrectos ");
					semantic=semantic + 1; 
					System.out.println("");
					
					
				}
			}
			}
			
			
			
			
			
			
				
			RESULT = E;
		
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("opcion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opcion ::= TK_NUMERO 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		Integer E = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT = E.toString();
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("opcion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opcion ::= TK_ID 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 RESULT = E;
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("opcion",5, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operaciones ::= TK_RESTA 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operaciones ::= TK_SUMA 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("operaciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formato2 ::= 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("formato2",19, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formato2 ::= operaciones formato 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		RESULT= E;
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("formato2",19, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formato ::= opcion operaciones opcion formato2 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		
			
			String token1=check(E);
		   	String token2=check(E1);
		    
		   	if(token1.equalsIgnoreCase(token2))
		   	{
		   	
		   	 	if(token1.equalsIgnoreCase("boolean"))
		   	 	{
		   	 	System.out.println(" Error en suma de tipos  "+  "'"+E+"'"+ " " + token1.toUpperCase() + " " +  "'"+E1+"'" + " " + token2.toUpperCase() + " en la linea " + Eleft + " en la columna " + Eright);
		   	 	semantic=semantic + 1; 
	
		   	 	RESULT="ERROR";		
		   	 	}
		   	 	else
		   	 	{
		   	 	RESULT=check(E);
		   	 	}
		   	 
		   	 
		   
		  	 }
		  	 else
		   	{
		    	System.out.println(" Error en suma de tipos  "+  "'"+E+"'"+ " " + token1.toUpperCase() + " " +  "'"+E1+"'" + " " + token2.toUpperCase() + " en la linea " + Eleft + " en la columna " + Eright);
		   		semantic=semantic + 1; 
		   		System.out.println("");
		   		RESULT="ERROR"	;
		   	}
		             
		
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("formato",18, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formato ::= TK_OPENPARENT formato TK_CLOSEPARENT formato2 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		  	
		  	if (E3!= null){
		   	String token= check (E3);
		   	
		   	if (!token.equalsIgnoreCase(E))
		   	{
		   		
		   		System.out.println(" Error en suma de tipos  "+  "'"+E+"'"+ "con "+ "'"+token+"'"  +" en la linea " + Eleft + " en la columna " + Eright);
		   		System.out.println("");
		   		semantic++;
		   		RESULT="ERROR";
		   		
		   	}
		   	}
		  
		  	RESULT=E;
		  
		  
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("formato",18, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formato ::= opcion 
            {
              String RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 
				RESULT=E;
			
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("formato",18, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresion ::= error 
            {
              String RESULT =null;
		  errors++;
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresion ::= TK_ID TK_IGUAL sentencia 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.peek()).value;
		 
			
				String token = check2(E1);
				
				String token2= check(E2);
				
				if(token.equalsIgnoreCase(token2) ) 		
				{
		   			RESULT=token;
		   	 	}
		  		else
		   		{
		   	 		if(token.equalsIgnoreCase("No declarado"))
		   	 		{
		   	 			System.out.println(" Variable no declarada: " +"'"+E1+"'"+ " en la linea " + E1left + " en la columna " +E1right );	
		   	 			semantic=semantic + 1; 
		   	 			System.out.println("");
		   	 		}
		   	 		else
		   	 		{
		   				System.out.println(" Asignacion de tipos invalidos  " + "'"+E1+"' tipo  " + token.toUpperCase() + " y "+ "'"+E2+"' tipo  "+ token2.toUpperCase()+ " en la linea : " + E1left + " en la columna " +E1right );
		   				semantic=semantic + 1; 
		   				System.out.println("");
		   			}
		  	    }
		             
		              
				
			
			
			
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= formato TK_SEMI 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).value;
		  	
						RESULT=e; 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloqueclose ::= error 
            {
              String RESULT =null;
		  errors++; reporte();
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("bloqueclose",20, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloqueclose ::= error TK_SEMI 
            {
              String RESULT =null;
		  errors++; reporte();
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("bloqueclose",20, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloqueclose ::= TK_END TK_SEMI 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("bloqueclose",20, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bloque ::= expresion bloque 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bloque ::= 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("bloque",2, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // programa ::= error 
            {
              String RESULT =null;
		  errors++;
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= TK_BEGIN bloque bloqueclose 
            {
              String RESULT =null;

              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // axioma ::= error decvar decfunc programa 
            {
              String RESULT =null;
		 errors++; reporte(); 
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("axioma",0, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= axioma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_SemanticoCup$parser.done_parsing();
          return CUP$Sintactico_SemanticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // axioma ::= TK_PROGRAM decvar decfunc programa 
            {
              String RESULT =null;
		 reporte();
              CUP$Sintactico_SemanticoCup$result = parser.getSymbolFactory().newSymbol("axioma",0, ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.elementAt(CUP$Sintactico_SemanticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_SemanticoCup$stack.peek()), RESULT);
            }
          return CUP$Sintactico_SemanticoCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

