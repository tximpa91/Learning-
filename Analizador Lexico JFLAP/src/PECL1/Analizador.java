/* The following code was generated by JFlex 1.4.3 on 10/21/15 1:48 PM */


package PECL1;

import java.io.*;
import java.util.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/21/15 1:48 PM from the specification file
 * <tt>/Users/luisparada1/Documents/workspace/PECL1/src/PECL1/PECL1LEX.lex</tt>
 */
class Analizador {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\10\1\0\1\12\1\7\22\0\1\12\3\21\1\3"+
    "\3\21\1\16\1\17\1\21\1\5\1\15\1\4\1\0\1\11\12\6"+
    "\1\21\1\15\1\20\1\13\1\14\2\21\32\1\4\21\1\2\1\21"+
    "\32\1\4\21\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\2\3\1\4\2\5\1\1"+
    "\1\6\1\3\1\1\2\7\1\1\1\10\1\0\1\11"+
    "\1\0\1\12\1\4\1\12\1\3\3\12\1\0\5\12"+
    "\1\13\6\0\1\10\1\14\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[47];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\22\0\44\0\66\0\110\0\132\0\154\0\176"+
    "\0\220\0\22\0\242\0\22\0\264\0\306\0\22\0\330"+
    "\0\352\0\374\0\66\0\u010e\0\u0120\0\u0132\0\u0144\0\u0156"+
    "\0\22\0\u0168\0\u017a\0\u018c\0\u019e\0\u01b0\0\u01c2\0\22"+
    "\0\u01d4\0\u01e6\0\u01f8\0\u020a\0\u021c\0\u022e\0\u0240\0\u0252"+
    "\0\u0264\0\u0276\0\22\0\264\0\306\0\u0288\0\u029a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[47];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\2\17\1\20\1\21"+
    "\1\4\23\0\2\3\3\0\1\3\14\0\1\22\1\23"+
    "\3\0\1\23\2\0\1\23\1\0\2\23\3\0\2\23"+
    "\1\0\1\24\1\25\1\0\3\25\2\0\1\25\1\0"+
    "\3\25\2\0\2\25\4\0\1\26\1\0\1\27\4\0"+
    "\1\30\1\31\3\0\1\32\6\0\1\33\1\27\4\0"+
    "\1\34\7\0\1\22\1\23\3\0\1\10\2\0\1\23"+
    "\1\0\2\23\3\0\2\23\10\0\1\12\12\0\1\22"+
    "\1\23\3\0\1\23\2\0\1\35\1\0\2\23\3\0"+
    "\2\23\1\0\1\22\1\23\3\0\1\23\2\0\1\23"+
    "\1\0\1\36\1\23\3\0\2\23\1\0\1\22\1\23"+
    "\3\0\1\23\2\0\1\23\1\0\1\37\1\23\3\0"+
    "\2\23\16\0\1\40\4\0\1\22\1\23\3\0\1\23"+
    "\2\0\1\23\1\0\1\41\1\42\3\0\2\23\1\0"+
    "\2\22\3\0\1\22\14\0\2\24\3\0\1\24\14\0"+
    "\1\43\1\25\1\0\3\25\2\0\1\25\1\0\3\25"+
    "\2\0\2\25\4\0\1\44\23\0\1\27\17\0\1\45"+
    "\21\0\1\46\22\0\1\47\21\0\1\50\14\0\1\51"+
    "\1\52\1\35\3\51\1\35\2\53\1\35\1\51\2\35"+
    "\3\51\2\35\1\0\1\22\1\23\3\0\1\23\2\0"+
    "\1\23\1\0\1\54\1\23\3\0\2\23\1\0\1\22"+
    "\1\23\3\0\1\23\2\0\1\23\1\0\1\23\1\55"+
    "\3\0\2\23\1\0\1\22\1\23\3\0\1\23\2\0"+
    "\1\23\1\0\2\23\3\0\1\56\1\23\1\0\1\22"+
    "\1\23\3\0\1\23\2\0\1\23\1\0\2\23\3\0"+
    "\1\57\1\23\1\0\2\43\3\0\1\43\17\0\1\26"+
    "\30\0\1\30\26\0\1\32\6\0\1\33\27\0\1\34"+
    "\6\0\7\51\2\53\12\51\2\52\3\51\1\52\2\53"+
    "\11\51\1\0\1\22\1\23\3\0\1\23\2\0\1\23"+
    "\1\0\1\41\1\23\3\0\2\23\1\0\1\22\1\23"+
    "\3\0\1\23\2\0\1\23\1\0\1\23\1\42\3\0"+
    "\2\23";

  private static int [] zzUnpackTrans() {
    int [] result = new int[684];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\1\1\1\11\2\1\1\11"+
    "\3\1\1\0\1\1\1\0\3\1\1\11\3\1\1\0"+
    "\2\1\1\11\3\1\6\0\1\1\1\11\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[47];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	 static int palabrasreservadas=0;
	 static int numeros=0;
	 static int identificador=0;
	 static int errores=0;
	 static int booleanos=0;
	 static int funciones=0;
	 static int comentarios= 0;
	 static String mensaje="";
	 static ArrayList<String> FuncionesToken = new ArrayList<String>();
	
	
	
	
	public static void main (String argv[])throws java.io.IOException {
			for(int i=0; i<argv.length ; i++){
			File fis=new File(argv[i]); 
        	String nombre= fis.getName();
 			int tamaño = nombre.length();
 			
        	if (nombre.startsWith(".prog", tamaño-5))
        	{
        	FileInputStream realFile =new FileInputStream(fis.getAbsolutePath());   
        		
				System.out.println();
				System.out.println( "Comenzando el análisis de su archivo: "+ nombre);
				System.out.println();
				
				
				Analizador yy = new Analizador(realFile);   
				while (yy.yylex() != -1) ;  
				reporte();
				
				} 
			else{
			System.out.println();
			System.out.println( "Comenzando el análisis de su archivo: "+ nombre);
		
			System.out.println( "Su Archivo:  " +nombre+ " no es compatible");
			
				}		
			}
		}
		public  static void reporte(){
			System.out.println(""); 
			System.out.println("Estadísticas"); 
			System.out.println("------------"); 
			System.out.println(""); 
			System.out.println("Numero de palabras reservadas: " +palabrasreservadas); 
			System.out.println("Numeros:" + numeros); 
			System.out.println("Booleanos: " + booleanos);
		   
		    
			int i=0;
			int size = FuncionesToken.size();
			System.out.print("Funciones: "+size+ " (");
				while(i<FuncionesToken.size()){
				System.out.print(FuncionesToken.get(i)+ "," );
				i++;
			
			}
			System.out.print(")");
			System.out.println();
			System.out.println("Identificadores: " + identificador);
			palabrasreservadas=0;
	 		numeros=0;
	 		identificador=0;
	 		errores=0;
	 		booleanos=0;
	 		funciones=0;
	 		comentarios= 0;
	 		mensaje="";
	 		FuncionesToken.removeAll(FuncionesToken);
		}
		
		public static  void Agregar (String token){
			if (!FuncionesToken.contains(token)){
				FuncionesToken.add(token);
			}
		}
		
		
		
		public static void Implicito(String token)
		{
			String nuevo = token.toUpperCase();
			
			switch(nuevo)
			{
				case "PROGRAM": palabrasreservadas++;
					 			break;
					 			
				case "RETURN": palabrasreservadas++;
							   break;
							   
				case "TRUE":   palabrasreservadas++; 
							   booleanos++;
							   break;
							   
				case "FALSE":  palabrasreservadas++; 
							   booleanos++;
							   break;
							   
				case "INTEGER": palabrasreservadas++; 	
								break;
				
				case "BOOLEAN": palabrasreservadas++;
								break;
				
				case "FUNCTION": palabrasreservadas++;
								 break;
								 
				case "BEGIN": 	palabrasreservadas++;
								break;
								
				case "END":		palabrasreservadas++;
								break;
				
				case "VARDECL": palabrasreservadas++;
								break;
			
				default: identificador++;
						 break;
			
			
			}
		
			
		}
		
		
		
		
		public  void Error (int opcion )
		{
			
			Integer linea=1;
			Integer columna=1;
			columna = columna+yycolumn;
			linea = linea+yyline;
				switch (opcion)
			{
				case 0:  System.out.println("Error en la linea: " +linea+" "+ "columna: " +columna+ " Identificador Erroneo: "+ "'" +yytext()+"'");
						 break;
				
			
				case 1: System.out.println("Error en la linea: " +linea+" "+ "columna: " +columna+ " Funcion Erroneo: "+ "'" +yytext()+"'");
						break;
				case 2: System.out.println("Error en la linea: " +linea+" "+ "columna: " +columna+ " Operador o Puntuacion erronea: "+ "'" +yytext()+"'");
						break;
				}
		}
		
		
		



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Analizador(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Analizador(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 66) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { /* Comentarios */
          }
        case 13: break;
        case 10: 
          { Error(2);
          }
        case 14: break;
        case 7: 
          { /* Puntuacion */
          }
        case 15: break;
        case 4: 
          { numeros++;
          }
        case 16: break;
        case 2: 
          { Implicito(yytext());
          }
        case 17: break;
        case 6: 
          { /*	Espacio*/
          }
        case 18: break;
        case 3: 
          { /* Operadores */
          }
        case 19: break;
        case 8: 
          { Error(0);
          }
        case 20: break;
        case 9: 
          { funciones++; Agregar(yytext());
          }
        case 21: break;
        case 1: 
          { System.out.println("Error en la linea: " +yyline+" "+ "columna: " +yycolumn+  "'" +yytext()+"'");
          }
        case 22: break;
        case 5: 
          { /*	Salto de linea*/
          }
        case 23: break;
        case 11: 
          { Error(1);
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
