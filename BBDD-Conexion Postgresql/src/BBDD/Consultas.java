/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BBDD;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author luisparada
 */
public class Consultas extends javax.swing.JFrame {
        private Connection c ;
        Statement sRol = null;
        Statement sConsulta = null;
        ResultSet rs = null;
        ResultSetMetaData rsmtadta;
    /**
     * Creates new form Consultas
     */
    public Consultas(Connection c ) {
        initComponents();
        this.c=c;
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Consulta 1", "Consulta 2", "Consulta 3", "Consulta 4", "Consulta 5", "Consulta 6", "Consulta 7", "Consulta 8", "Consulta 9", "Consulta 10", "Consulta 11", "Consulta 12", "Consulta 13", "Consulta 14", "Consulta 15", "Consulta 16", "Consulta 17", "Consulta 18", "Consulta 19", "Consulta 20" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Consultas:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jToggleButton1.setText("Realizar");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel2.setText("Consulta personalizada:");

        jToggleButton2.setText("Realizar Consulta Personalizada");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jToggleButton3.setText("Borrar");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jLabel3.setText("Resultado:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jToggleButton2)
                            .addGap(26, 26, 26)
                            .addComponent(jToggleButton3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jToggleButton1)))))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jToggleButton1))
                .addGap(43, 43, 43)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToggleButton3)
                    .addComponent(jToggleButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        boolean control = true;
         int n  =jComboBox1.getSelectedIndex();
        switch (n){
            
            case 0:{  
                
                
            try {
                control=true;
                sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select sum(a) as \"Todos los pagos + Servicios\" from (select sum(\"Precio_con_IVA\") AS a "
                        + "from \"Pago\"natural join \"Debe_Contener\""
                        + " union all (select sum (\"Precio_Servicio\") from \"Servicios\")) as hola ");

                        
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                    control = false;
                
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
            }break;}
            case 1: {
                control = true;
                try {
                sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Categoria\", count (\"Categoria\" ) from \"Producto\"  group by \"Categoria\" ");

                        
           } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                
                
                
            }
        }
        
       int index = 0;
       if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }}break;}
            case 2:{
                try {
                control = true;
                sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Nombre_Producto\",\"Categoria\", \"Precio_Con_IVA\" FROM \"Producto\" where \"Categoria\" = 'Telefonia' ");

                        
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                
                
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        } break;}
            
            
            case 3: {
                
                try {
                    control = true;
                    sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select * from \"Producto\" where \"Codigo_Producto\" not in (select \"Codigo_Producto\" from \"Contiene\")" );

                        
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                           
                
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
            
            case 4:{
                try {
                    control = true;
                    
                    sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Nombre\", \"DNI\" , \"Precio_con_IVA\" FROM \"Pago\" natural join   \"Cliente_Online\"natural join \"Cliente\"");

                        
           } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }}break;}
            
            case 5:{
                   try {
                       control =true;
                       sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Nombre_Producto\", \"Codigo_Producto\"  FROM \"Puede_Tener\" natural join   \"Producto\" ");

                        
             } catch (SQLException ex) {
                 JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                 
               
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }}break;}
            case 6: {
                   try {
                       control= true;
                       sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Nombre\", \"DNI\" , \"Precio_con_IVA\" FROM \"Pago\" natural join   \"Cliente_Online\"natural join \"Cliente\"");

                        
                       } catch (SQLException ex) {
                           JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                           control = false;
                          
                
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
         }
            }break;}
            case 7: {
                   try {
                       control= true;
                       sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Nombre_Producto\", \"Codigo_Producto\",count (\"Codigo_Producto\") as \"Cantidad\", sum (\"Precio_con_IVA\") as \"Importe_Total\"\n" +
"from \"Pago\" natural join \"Debe_Contener\"  natural join \"Producto\"\n" +
"group by \"Nombre_Producto\", \"Codigo_Producto\"\n" +
"having count (\"Codigo_Producto\") >= all (select count (\"Codigo_Producto\")\n" +
"					  from \"Pago\" natural join \"Debe_Contener\" natural join \"Producto\"\n" +
"				          group by \"Nombre_Producto\", \"Codigo_Producto\")\n" +
"");

                
                        
               } catch (SQLException ex) {
                   JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                   control = false;
                   ex.printStackTrace();
                
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
            
       case 8: {
                   try {
                        control = true;
                        sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select (\"Precio_Con_IVA\"*0.21) "
                        + "from \"Dia_Sin_IVA\" natural inner join \"Producto\"  ");
                
                        
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
                        
          case 9: {
                   try {
                        control=true;
                        sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Nombre_Producto\", count (\"Codigo_Producto\") as \"Veces Devuelto\"\n" +
"from \"Devuelve\"  natural join \"Producto\"\n" +
"group by \"Nombre_Producto\", \"Codigo_Producto\"\n" +
"order by \"Veces Devuelto\" asc");
                        
             } catch (SQLException ex) {
                 JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                 control = false;
               
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
          
          case 10: {
                   try {
                        control =true;
                        sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select (total) "
                        + "from (select (\"Precio_con_IVA\" + \"Precio_Servicio\") as total "
                        + "from \"Pago\"  natural join \"Servicios\" "+
                         "group by \"Precio_con_IVA\" , \"Servicios\".\"Precio_Servicio\" "
                        + "union all"
                        + "(select sum (distinct \"Precio_con_IVA\")"
                        + "from \"Devuelve\" natural join  \"Pago\" "
                        + "group by \"Precio_con_IVA\" )) as TODO" );
                        
               
                        
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
          
          
          
          
          case 11: {
                   try {
                       control=true;
                       sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"DNI\" , \"Nombre\",\"Importe_Total\" "
                        + "from \"Factura\" natural join \"Pago\" natural join \"Cliente\" ");
                        
               
                        
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
          
                    case 12: {
                   try {
                        control=true;
                        sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Categoria\", avg (\"Fecha_Devolucion\"-\"Fecha\") as \"Media\""
                        + "from \"Pago\" natural join \"Devuelve\" natural join \"Producto\""
                        + "Group by \"Categoria\" "
                        + "order by \"Media\" desc " );
                
                        
               
                        
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
               
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
                    
              case 13: {
                   try {
                sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Nombre_Asociado\", count (\"Nombre_Asociado\") as \"Solicitado\"\n" +
"from \"Debe_Contener\" natural join \"Asociacion\" natural join \"Servicios\"\n" +
"Group by \"Nombre_Asociado\"");
                
                        
              } catch (SQLException ex) {
                  JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                  control = false;
                
                
            }
        }
        
        int index = 0;
        if ( control ){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
              
              case 14: {
                   try {
                       control=true;
                       sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select sum(\"Precio_Servicio\") as \"Total € Servicios\"\n" +
"from \"Servicios\" "); 
                
                        
          } catch (SQLException ex) {
              JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
              control = false;
               
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
              
                case 15: {
                   try {
                       control = true;
                       sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select  \"Codigo_Producto\", count (\"Motivo\") as \"Cantidad de Veces Devuelta\", \"Motivo\"\n" +
"from \"Devuelve\"\n" +
"Where (\"Motivo\" like '%desperfect%' ) or (\"Motivo\" like '%Desperfect%')\n" +
"group by \"Codigo_Producto\", \"Motivo\"");
                
          } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        } break;}
                
             case 16: {
                   try {
                       control = true;
                       sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Nombre_Unico\",\"Cantidad\" as \"Cantidad\",\"Precio\"as \"Precio_Pack\",(\"Precio_Con_IVA\"* 3)as \"Precio pack sin Oferta\",((\"Precio_Con_IVA\"*\"Cantidad\")-\"Precio\") as \"Ahorro\"\n" +
"from \"Pack\" natural  join \"Contiene\" natural  join \"Producto\"");
                
                        
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
            control = false;
                
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
             
             case 17: {
                   try {
                       control=true;
                       sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Codigo_Producto\",\"Nombre_Producto\",\"Precio_Con_IVA\"\n" +
"from \"Producto\" \n" +
"where  \"Codigo_Producto\" not in ( select \"Codigo_Producto\" \n" +
"				   from \"Puede_Tener\"\n" +
"				   union all (select \"Codigo_Producto\" from \"Dia_Sin_IVA\"))");
                
           } catch (SQLException ex) {
               JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
               control = false;
                
                
            }
        }
        if (control){
        int index = 0;
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
             
             case 18: {
                   try {
                       control = true;
                       sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Nombre_Unico\" as \"Producto en Oferta\",sum (\"Precio_Oferta\") as \"Recaudado en ofertas\"\n" +
"from \"Oferta\" natural  join \"Puede_Tener\" natural join \"Producto\"  natural  join \"Pago\"\n" +
"where \"Fecha\" between \"Fecha_de_Inicio\" and \"Fecha_Fin\"\n" +
"group by \"Nombre_Unico\" ");
                
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
            control = false;
                
            }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;}
             
                case 19: {
                   try {
                       control = true;
                       sConsulta = c.createStatement();
            } catch (SQLException ex) {
                Logger.getLogger(Consultas.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        {
            try { 
                rs = sConsulta.executeQuery("select \"Categoria\",count (\"Categoria\") as \"Numero\"\n" +
"from \"Puede_Tener\" natural join \"Producto\"\n" +
"where \"Codigo_Producto\"  not in (select \"Codigo_Producto\" from \"Dia_Sin_IVA\")\n" +
"group by  \"Categoria\"\n" +
"having count (\"Categoria\") <= 10\n" +
"order by \"Numero\" asc ");
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                           
                }
        }
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            se.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }break;
                }
          
        }
        
        
      
       
        
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setText("");
        jTextArea2.setText("");
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:
        boolean control =true;
        boolean ejecucion = true;
          try {
                sConsulta = c.createStatement();
            } catch (SQLException ex) {
                
                
            }
                String query = jTextArea2.getText();
                String info = query.toLowerCase();
             if (info.contains("insert") || info.contains("delete") || info.contains("update")
                         || info.contains("create") || info.contains("drop")  ){
            try {
                sConsulta.executeUpdate(query);
                control = false;
                
            } catch (SQLException ex) {
                
                JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                control = false;
                ejecucion=false;
            }
                if (ejecucion)
                    JOptionPane.showMessageDialog(this, "Actualizacion con Éxito","BBDD", JOptionPane.INFORMATION_MESSAGE);
                    
             }
                 else{
                     try{
                     rs = sConsulta.executeQuery(query);}
                     catch (SQLException ex) {
                     JOptionPane.showMessageDialog(this, "Error de sintaxis o No posee los permisos necesarios","ERROR", JOptionPane.ERROR_MESSAGE);
                     control = false;
                               }
                 }
                 
                 
                 
                
            
        
        
        int index = 0;
        if (control){
        try {
            // Contamos el numero de columnas
            rsmtadta = rs.getMetaData();     // Crear un objeto ResultSetMetaData
            int colCount = rsmtadta.getColumnCount();
            System.out.println("Numero de columnas " + colCount);
            String resultado = "";

            while (rs.next()) {
                System.out.print("Resultado de la fila " + index++ + ":");
                for (int i = 1; i <= colCount; i++) {
                    System.out.print("  " + rs.getString(i));
                    resultado = resultado+ rs.getString(i) + "  ";
                   
                }
                resultado =resultado + "\n";
                System.out.println(" ");
            }
            jTextArea1.setText("");
            jTextArea1.setText(resultado);
        } catch (SQLException se) {

            System.out.println("Error al recoger los resultados");
            
            JOptionPane.showMessageDialog(this, "Error al recoger los resultados", se.toString(), JOptionPane.ERROR_MESSAGE);
        }
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Consultas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    // End of variables declaration//GEN-END:variables
}
